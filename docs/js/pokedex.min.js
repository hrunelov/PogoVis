/*! PogoVis v0.0.1 | (c) 2020 Hannes Runelöv | MIT License |  */
const TYPE_COLORS={bug:"#7A9C26",dark:"#51525E",dragon:"#075A96",electric:"#C6AE4A",fairy:"#CC8BC0",fighting:"#AA354C",fire:"#CB8142",flying:"#7C8FB4",ghost:"#4E5797",grass:"#4B9852",ground:"#AB724B",ice:"#63A89F",normal:"#747B81",poison:"#944EA6",psychic:"#CA6B6A",rock:"#A29772",steel:"#437882",water:"#4B88B0",unknown:"#807A78"};var pokedex;class Pokedex extends JSONAssignedObject{constructor(e,t,s,i){super(e),pokedex=this,this.types=e.types.map(e=>new Type(e)),s(.09);for(let e of this.types)for(let t of e.effectiveness){const e=t;for(let s of this.types.filter(t=>t.key===e.defendingType))t.defendingType=s}s(.18),this.moves={fast:e.moves.fast.map(e=>new FastMove(e)),charged:e.moves.charged.map(e=>new ChargedMove(e))},s(.27),this.items=e.items.map(e=>Object.assign(new Item,e)),s(.36),this.pokemon=e.pokemon.map(e=>new Pokemon(e)),s(.45);for(let e of this.pokemon){for(let t of e.forms){if(t.evolutions)for(let e of t.evolutions){const t=e;for(let s of this.pokemon.filter(e=>e.key===t.pokemon))for(let i of s.forms.filter(e=>e.key===t.form))e.descendant=i;delete e.pokemon,delete e.form}t.image=t.key}if(e.relatives)for(let t=0;t<e.relatives.length;++t)e.relatives[t]=this.pokemon.filter(s=>s.key===e.relatives[t])[0]}s(.54),this.superEffectiveMultiplier=function(){for(let e of this.types)for(let t of e.effectiveness)if(t.damageMultiplier>1)return t.damageMultiplier}.bind(this)(),this.notVeryEffectiveMultiplier=function(){for(let e of this.types)for(let t of e.effectiveness)if(t.damageMultiplier<1&&this.types.find(e=>e.effectiveness.find(e=>e.damageMultiplier<t.damageMultiplier)))return t.damageMultiplier}.bind(this)(),this.immuneMultiplier=function(){for(let e of this.types)for(let t of e.effectiveness)if(!this.types.find(e=>e.effectiveness.find(e=>e.damageMultiplier<t.damageMultiplier)))return t.damageMultiplier}.bind(this)(),s(.72),s(.81),s(.9),s(1),i()}getCounterEffectiveness(e){let t=this.types.map(e=>({attackingType:e,damageMultiplier:1}));for(let s of e)for(let e of s.counterEffectiveness){const s=e;t.find(e=>e.attackingType.key===s.attackingType.key).damageMultiplier*=s.damageMultiplier}return t}}class Type extends JSONAssignedObject{get counterEffectiveness(){return pokedex.types.map(function(e){return{attackingType:e,damageMultiplier:e.effectiveness.find(e=>e.defendingType.key===this.key).damageMultiplier}}.bind(this))}get color(){return TYPE_COLORS[this.key]}}class FastMove extends JSONAssignedObject{constructor(e){super(e),this.type?this.type=pokedex.types.find(e=>e.key===this.type):this.type=new Type}}class ChargedMove extends JSONAssignedObject{constructor(e){super(e),this.type=pokedex.types.find(e=>e.key===this.type)}}class Item extends JSONAssignedObject{}class Pokemon extends JSONAssignedObject{constructor(e){super(e),this.name||(this.name="MissingNo."),this.category||(this.category="??? Pokémon"),this.forms=this.forms.map(function(e){let t=new Form(e);return t.pokemon=this,t}.bind(this))}}class Form extends JSONAssignedObject{constructor(e){super(e),this.types=this.types.map(e=>pokedex.types.find(t=>t.key===e));for(let e of this.movePool.fast){const t=e;e.move=pokedex.moves.fast.find(e=>e.key===t.move)}for(let e of this.movePool.charged){const t=e;e.move=pokedex.moves.charged.find(e=>e.key===t.move)}if(this.evolutions)for(let e of this.evolutions){const t=e;e.requirements.item&&(e.requirements.item=pokedex.items.find(e=>e.key===t.requirements.item))}}get counterEffectiveness(){return pokedex.getCounterEffectiveness(this.types)}get ancestor(){for(let e of pokedex.pokemon)for(let t of e.forms)if(t.evolutions&&t.evolutions.find(e=>e.descendant&&e.descendant.key===this.key))return t}get firstAncestor(){let e=this;for(;e.ancestor;e=e.ancestor);return e}get lineage(){let e=[];this.firstAncestor;return (function t(s){if(e.push(s),s.evolutions)for(let e of s.evolutions)t(e.descendant)})(this.firstAncestor),e}sameTyping(e,t){if(this.types.length!==e.types.length)return!1;let s=this.types[0].key===e.types[0].key;return 1===this.types.length?s:s&&this.types[1].key===e.types[1].key||!t&&this.types[0].key===e.types[1].key&&this.types[1].key===e.types[0].key}}function getTypeSplitColor(e,t,s){let i=mixColors("#000",e[0].color,s);if(1==e.length)return i;{let o=mixColors("#000",e[1].color,s);return splitColor("to bottom",i,o,t)}}