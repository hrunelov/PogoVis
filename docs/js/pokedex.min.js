/*! PogoVis v0.0.1 | (c) 2020 Hannes RunelÃ¶v | MIT License |  */
const TYPE_COLORS={bug:"#7A9C26",dark:"#51525E",dragon:"#075A96",electric:"#C6AE4A",fairy:"#CC8BC0",fighting:"#AA354C",fire:"#CB8142",flying:"#7C8FB4",ghost:"#4E5797",grass:"#4B9852",ground:"#AB724B",ice:"#63A89F",normal:"#747B81",poison:"#944EA6",psychic:"#CA6B6A",rock:"#A29772",steel:"#437882",water:"#4B88B0",unknown:"#807A78"};var pokedex;class Pokedex extends JSONAssignedObject{constructor(e,t,s,o){super(e),pokedex=this,this.types=e.types.map(e=>new Type(e));for(let e of this.types)for(let t of e.effectiveness){const e=t;for(let s of this.types.filter(t=>t.key===e.defendingType))t.defendingType=s}this.moves={fast:e.moves.fast.map(e=>new FastMove(e)),charged:e.moves.charged.map(e=>new ChargedMove(e))},this.items=e.items.map(e=>Object.assign(new Item,e)),this.pokemon=e.pokemon.map(e=>new Pokemon(e));for(let e of this.pokemon)for(let s of e.forms){for(let e of s.evolutions){const t=e;for(let s of this.pokemon.filter(e=>e.key===t.pokemon))for(let o of s.forms.filter(e=>e.key===t.form))e.descendant=o;delete e.pokemon,delete e.form}s.image=t.includes(s.key)?s.key:e.forms[0].key}this.max={baseStats:{stamina:d3.max(this.pokemon.map(e=>d3.max(e.forms.map(e=>e.baseStats.stamina)))),attack:d3.max(this.pokemon.map(e=>d3.max(e.forms.map(e=>e.baseStats.attack)))),defense:d3.max(this.pokemon.map(e=>d3.max(e.forms.map(e=>e.baseStats.defense))))},moveStats:{fast:{gymsAndRaids:{power:d3.max(this.moves.fast.map(e=>e.stats.gymsAndRaids.power)),energyGain:d3.max(this.moves.fast.map(e=>e.stats.gymsAndRaids.energyGain)),duration:d3.max(this.moves.fast.map(e=>e.stats.gymsAndRaids.duration))},trainerBattles:{power:d3.max(this.moves.fast.map(e=>e.stats.trainerBattles.power)),energyGain:d3.max(this.moves.fast.map(e=>e.stats.trainerBattles.energyGain)),duration:d3.max(this.moves.fast.map(e=>e.stats.trainerBattles.duration)),turns:d3.max(this.moves.fast.map(e=>e.stats.trainerBattles.turns))}},charged:{gymsAndRaids:{power:d3.max(this.moves.charged.map(e=>e.stats.gymsAndRaids.power)),energyCost:d3.max(this.moves.charged.map(e=>e.stats.gymsAndRaids.energyCost)),duration:d3.max(this.moves.charged.map(e=>e.stats.gymsAndRaids.duration))},trainerBattles:{power:d3.max(this.moves.charged.map(e=>e.stats.trainerBattles.power)),energyCost:d3.max(this.moves.charged.map(e=>e.stats.trainerBattles.energyCost))}}}};let i=0;for(let e of this.types)for(let t of this.types){if(e.key===t.key)continue;let s=Math.max(...this.getCounterEffectiveness([e,t]).map(e=>e.damageMultiplier));s>i&&(i=s)}this.max.damageMultiplier=i,console.log(this.max),s(1),o()}getCounterEffectiveness(e){let t=pokedex.types.map(e=>({attackingType:e,damageMultiplier:1}));for(let s of e)for(let e of s.counterEffectiveness){const s=e;t.find(e=>e.attackingType.key===s.attackingType.key).damageMultiplier*=s.damageMultiplier}return t}}class Type extends JSONAssignedObject{get counterEffectiveness(){return pokedex.types.map(function(e){return{attackingType:e,damageMultiplier:e.effectiveness.find(e=>e.defendingType.key===this.key).damageMultiplier}}.bind(this))}get color(){return TYPE_COLORS[this.key]}}class FastMove extends JSONAssignedObject{constructor(e){super(e),this.type?this.type=pokedex.types.find(e=>e.key===this.type):this.type=new Type}}class ChargedMove extends JSONAssignedObject{constructor(e){super(e),this.type=pokedex.types.find(e=>e.key===this.type)}}class Item extends JSONAssignedObject{}class Pokemon extends JSONAssignedObject{constructor(e){super(e),this.forms=this.forms.map(function(e){let t=new Form(e);if(t.pokemon=this,!t.description){const e=this.description;delete t.description,Object.defineProperty(t,"description",{get:()=>e})}return t}.bind(this))}}class Form extends JSONAssignedObject{constructor(e){super(e),this.types=this.types.map(e=>pokedex.types.find(t=>t.key===e));for(let e of this.movePool.fast){const t=e;e.move=pokedex.moves.fast.find(e=>e.key===t.move)}for(let e of this.movePool.charged){const t=e;e.move=pokedex.moves.charged.find(e=>e.key===t.move)}for(let e of this.evolutions){const t=e;e.requirements.item&&(e.requirements.item=pokedex.items.find(e=>e.key===t.requirements.item))}}get counterEffectiveness(){return pokedex.getCounterEffectiveness(this.types)}get ancestor(){for(let e of pokedex.pokemon)for(let t of e.forms)if(void 0!==t.evolutions.find(e=>e.descendant.key===this.key))return t}get firstAncestor(){let e=this;for(;void 0!==e.ancestor;e=e.ancestor);return e}sameTyping(e,t){if(this.types.length!==e.types.length)return!1;let s=this.types[0].key===e.types[0].key;return 1===this.types.length?s:s&&this.types[1].key===e.types[1].key||!t&&this.types[0].key===e.types[1].key&&this.types[1].key===e.types[0].key}}function getTypeSplitColor(e,t,s){let o=mixColors("#000",e[0].color,s);if(1==e.length)return o;{let i=mixColors("#000",e[1].color,s);return splitColor("to bottom",o,i,t)}}